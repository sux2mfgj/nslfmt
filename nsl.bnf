nsl-syntax  ::= { <top-declarator> }*

top-declarator  ::= <declare-definition>
                |   <module-definition>
                |   <macro>

declare-definition ::= "declare" <identifire> "{" { <interfaces-definition> }* "}"

interfaces-definition::=    <io-width-definition>
                        |   <io-function-declarator>

io-wire-declarator  ::= <io-wire> <identifire> <width-defitinion> ";"

io-wire     ::= "input"
            |   "inout"
            |   "output"

width-definition ::= [ "[" <width-expression> "]" ]

width-expression    ::= <number>
                    |   <width-expression> <operator> <width-expression>

operator            ::= "/"
                    |   "*"
                    |   "+"
                    |   "-"
                    |   "<<"
                    |   ">>"
                    |   "^"
                    |   "~"

function-args       ::= [ <identifire> { "," <identifire> }* ]
function-return     ::= [ ":" <identifire> ]

io-function-declarator  ::= <io-function> <identifire> "(" <function-args> ")" <function-return> ";"

io-function ::= "func_in"
            |   "func_out"

module-definition ::= "module" <identifire> "{" <module-expression> "}"

module-expression   ::= { <reg-wire-module-declaration> }* { <module-behavior> }*

reg-wire-module-declaration ::= <reg-wire-definition>
                            |   <module-declaration>
                            |   <struct-wire-reg-declaration>
                            |   <proc-declaration>
                            |   <state-declaration>
                            |   <func-declaration>

reg-wire-definition ::= <reg-wire> <identifire> <width-declarator> [ "," <identifire> <width-declarator> ] ";"

reg-wire            ::= "reg" | "wire"

module-declaration  ::= <identifire> <identifire> ";"

struct-wire     ::= <identifire> <reg-wire> <identifire> ";"

proc-declaration    ::= "proc_name" <proc-information> { "," <proc-information> }* ";"

proc-information    ::= <identifire> "(" <function-args> ")"

state-declaration   ::= "state_name" <identifire> { "," <identifire> }* ";"

func-declaration    ::= "func_self" <identifire> "(" <function-args> ")" <function-return> ";"

module-behavior     ::= <assignment-expression>
                    |   <state-expression>
                    |   <func-expression>
                    |   <proc-expression>
                    |   <if-declaration>
                    |   <return-declaration>

assignment-expression   ::= <wire-reg-assignment> | <expression>
wire-reg-assignment     ::= <identifire> <assigner> <expression> ";"
assigner                ::= "=" | ":="
expression              ::= <number>
                        |   <identifire>
                        |   <expression> <operator> <expression>

macro       ::= "#" <macro-syntax> <newline>
macro-syntax    ::= <macro-define>
                |   <macro-include>
                |   <macro-ifdef>
                |   <macro-ifndef>
                |   <macro-undef>
                |   "else"
                |   "endif"

macro-define    ::= "define" <identifire> <define-pattern>
define-pattern  ::= ?any-thing?
macro-include   ::= "include" "\"" <file-path> "\""
macro-ifdef     ::= "ifdef" <identifire>
macro-ifndef    ::= "ifndef" <identifire>
macro-undef     ::= "undef" <identifire>

